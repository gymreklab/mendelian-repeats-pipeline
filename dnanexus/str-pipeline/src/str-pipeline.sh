#!/bin/bash
# str-pipeline2 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of bams: '${bams[@]}'"
    echo "Value of reffasta: '$reffasta'"
    echo "Value of regionfile: '$regionfile'"
    echo "Value of strinfo: '$strinfo'"
    echo "Value of famfile: '$famfile'"
    echo "Value of outprefix: '$outprefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$reffasta" -o reffasta

    dx download "$regionfile" -o regionfile
    if [ -n "$strinfo" ]
    then
        dx download "$strinfo" -o strinfo
    fi
    if [ -n "$famfile" ]
    then
        dx download "$famfile" -o famfile
    fi
    for i in ${!bams[@]}
    do
        dx download "${bams[$i]}" -o bams-$i
    done

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    for i in "${!vcfs[@]}"; do
        dx-jobutil-add-output vcfs "${vcfs[$i]}" --class=array:file
    done
}
